# -*- coding: utf-8 -*-
"""Exact_Algo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dF-muiPiiEIo35Omr25UIGyj5kW-iqGX
"""

import networkx as nx
import scipy as sc
import itertools
from networkx.algorithms.community.kernighan_lin import kernighan_lin_bisection
from statistics import mean
succlst = []
v = 4
for ege in range(10):
  equalcount = 0
  biggercount = 0
  lessc = 0

  numofedges = sc.special.comb(v, v/2) - (v-1) + 1

  for i in range(v-1, int(sc.special.comb(v, v/2))+1):
    tempgraph = nx.gnm_random_graph(v, i)
    while  nx.is_connected(tempgraph) == False:
        tempgraph = nx.gnm_random_graph(v, i)
    vertices = tempgraph.nodes
    edges = tempgraph.edges

    edgeslst = list(edges)
    verticeslst = list(vertices)
    temp_verticelst = list(vertices)
    comb_of_5 = []

    comb = sc.special.comb(v, v/2)
    type(comb)

    comb_of_5 = itertools.combinations(verticeslst, int(v/2))

    partition_poss = list(comb_of_5)
    min = 2**32

    partition1 = []
    partition2 = []
    finalcount = 0

    for j in range(len(partition_poss)):
      a = []
      count = 0
      verticeslst = []
      for kk in range(v):
        verticeslst.append(kk)

      for i in range(len(partition_poss[j])):
        verticeslst.remove(partition_poss[j][i])
      a = verticeslst
      b = partition_poss[j]

      for x in edgeslst:
        if x[0] in a and x[1] in b:
          count += 1
        elif x[0] in b and x[1] in a:
          count += 1
      if count < min:
            partition1 = a
            partition2 = b
            min = count
            finalcount = min
    d = (kernighan_lin_bisection(tempgraph))

    p1 = d[0]
    p2 = d[1]
    countt = 0

    for c in edgeslst:
      if c[0] in p1 and c[1] in p2:
              countt += 1
      elif c[0] in p2 and c[1] in p1:
              countt += 1

    if finalcount == countt:
            equalcount += 1
    elif finalcount < countt:
            biggercount += 1
    elif finalcount > countt:
            lessc += 1


  success_ratio = equalcount / numofedges

  succlst.append(success_ratio)


print(100*mean(succlst))
